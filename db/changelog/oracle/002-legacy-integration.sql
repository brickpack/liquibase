--liquibase formatted sql

--changeset oracle-team:002-create-integration-log-table
--comment: Create integration log table for tracking external system sync
CREATE TABLE integration_log (
    log_id NUMBER(15) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    system_name VARCHAR2(50) NOT NULL,
    operation_type VARCHAR2(20) NOT NULL,
    entity_type VARCHAR2(50) NOT NULL,
    entity_id VARCHAR2(100),
    status VARCHAR2(20) DEFAULT 'PENDING',
    request_data CLOB,
    response_data CLOB,
    error_message CLOB,
    started_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    completed_at TIMESTAMP,
    retry_count NUMBER(2) DEFAULT 0,
    CONSTRAINT chk_operation_type CHECK (operation_type IN ('CREATE', 'UPDATE', 'DELETE', 'SYNC')),
    CONSTRAINT chk_integration_status CHECK (status IN ('PENDING', 'SUCCESS', 'FAILED', 'RETRY'))
);

--changeset oracle-team:002-create-legacy-mappings-table
--comment: Create table for mapping legacy IDs to new system IDs
CREATE TABLE legacy_mappings (
    mapping_id NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    legacy_system VARCHAR2(50) NOT NULL,
    legacy_table VARCHAR2(100) NOT NULL,
    legacy_id VARCHAR2(100) NOT NULL,
    new_system VARCHAR2(50) NOT NULL,
    new_table VARCHAR2(100) NOT NULL,
    new_id VARCHAR2(100) NOT NULL,
    mapping_type VARCHAR2(20) DEFAULT 'DIRECT',
    is_active NUMBER(1) DEFAULT 1,
    created_date DATE DEFAULT SYSDATE,
    updated_date DATE DEFAULT SYSDATE,
    CONSTRAINT uk_legacy_mapping UNIQUE (legacy_system, legacy_table, legacy_id, new_system, new_table),
    CONSTRAINT chk_mapping_type CHECK (mapping_type IN ('DIRECT', 'COMPOSITE', 'CALCULATED'))
);

--changeset oracle-team:002-create-package-spec
--comment: Create package specification for legacy integration procedures
CREATE OR REPLACE PACKAGE PKG_LEGACY_INTEGRATION AS
    PROCEDURE sync_customer_data(p_customer_id IN NUMBER);
    PROCEDURE log_integration_event(
        p_system_name IN VARCHAR2,
        p_operation_type IN VARCHAR2,
        p_entity_type IN VARCHAR2,
        p_entity_id IN VARCHAR2,
        p_status IN VARCHAR2,
        p_error_message IN VARCHAR2 DEFAULT NULL
    );
    FUNCTION get_new_id_from_legacy(
        p_legacy_system IN VARCHAR2,
        p_legacy_table IN VARCHAR2,
        p_legacy_id IN VARCHAR2,
        p_new_system IN VARCHAR2,
        p_new_table IN VARCHAR2
    ) RETURN VARCHAR2;
END PKG_LEGACY_INTEGRATION;